(* Definition of the evolution function for the system's state *)
Fun[q_] := 
 Flatten[{
   (* First variable (q₀) update rule *)
   q[[1]] + al*q[[1]]*(a0 - be*q[[1]] - 
     be*de*Sum[q[[nfirme + T0 + (k - 2)*T1 + 2]], {k, 2, nfirme + 1}]),
   
   (* Vector of q_j (j=2..nfirme+1) updated with symmetric formula *)
   Table[
    a1/(2*be) - de/2*q[[nfirme + 2]] - 
     de/2*Sum[q[[i]], {i, 2, nfirme + 1}] + de/2*q[[j]], 
    {j, 2, nfirme + 1}
   ],
   
   (* Time-delay memory variables for q₀ *)
   Table[q[[nfirme + 2 + j]], {j, 1, T0 - 1}], 
   
   q[[1]],  (* Reinsert current q₀ at end of delay memory *)
   
   (* Build time-delay vectors for each firm *)
   Table[
    Append[
      Table[q[[nfirme + T0 + 2 + (k - 2)*T1 + j]], {j, 1, T1 - 1}], 
      q[[k]]
    ], 
    {k, 2, nfirme + 1}
   ]
 }]

(* Initial state: small random values *)
Q0 = Table[RandomReal[{0, 0.00001}], {k, 1, nfirme + T0 + nfirme*T1 + 1}];

(* Jacobian matrix of a list of functions with respect to a list of variables *)
JacobianMtx[funs_List, vars_List] := Outer[D, funs, vars];

(* Lyapunov exponents computation using QR decomposition *)
LCEsD[f_, initcond_, K_, trans_:0] := Module[
  {opt, n, a, J, s, q, r, lces},
  
  n = Length[initcond];             (* Dimension of the system *)
  x = Array[a, n];                  (* Symbolic variable vector *)
  J[y_List] := JacobianMtx[f[x], x] /. Thread[x -> y];  (* Jacobian at y *)
  
  x0 = Nest[f, N[initcond], trans]; (* Transient phase *)
  {q, r} = QRDecomposition[J[x0]];
  s = {};                           (* Store diagonal elements *)
  
  Do[
    x0 = f[x0];
    {q, r} = QRDecomposition[J[x0] . Transpose[q]];
    s = Append[s, Table[r[[i, i]], {i, n}]],
    {K}
  ];
  
  (* Compute and return sorted Lyapunov exponents *)
  lces = Sort[Re[Apply[Plus, Log[s]]]/K, Greater];
  Return[lces]
];

(* Simulation parameters *)
almax = 1.6;
al0 = 1;
M = 1000;      (* Number of steps *)
trans = 2000;  (* Transient iterations *)
Num = 200;     (* Number of points to plot in bifurcation diagram *)

(* Bifurcation diagram generation *)
bif = {};
For[k = 1, k <= (almax - al0)*M, k++,
  al = al0 + k/M;
  Q1 = Nest[Fun, Q0, trans];
  sol = NestList[Fun, Q1, Num];
  bif = Join[bif, Table[{al, sol[[k, 1]]}, {k, 1, Num}]]
]

(* Lyapunov exponent curve computation *)
M = 200;
lyap = {};
For[k = 1, k <= (almax - al0)*M, k++,
  al = al0 + k/M;
  lyap = Append[lyap, {al, LCEsD[Fun, Q0, 2000, 200][[1]]}]
]

(* Final combined plot: bifurcation + Lyapunov + reference line *)
Show[
  bif55, (* Presumed bifurcation plot graphic *)
  Lyap55, (* Presumed Lyapunov curve graphic *)
  Plot[0, {x, 1, 1.6}, PlotStyle -> {Gray, Thin}], 
  PlotRange -> All,
  PlotLabel -> "n=4, \!\(\*SubscriptBox[\(\[Tau]\), \(0\)]\)=5, \!\(\*SubscriptBox[\(\[Tau]\), \(1\)]\)=5",
  FrameLabel -> {"\[Alpha]", "\!\(\*SubscriptBox[\(q\), \(0\)]\)"}
]
